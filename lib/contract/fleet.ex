# Diode Server
# Copyright 2019 IoT Blockchain Technology Corporation LLC (IBTC)
# Licensed under the Diode License, Version 1.0
defmodule Contract.Fleet do
  @moduledoc """
    Wrapper for the FleetRegistry contract functions
    as needed by the tests
  """

  @spec set_device_whitelist(any, any, boolean) :: Chain.Transaction.t()
  def set_device_whitelist(fleet \\ Diode.fleet_address(), address, bool) when is_boolean(bool) do
    Shell.transaction(
      Diode.miner(),
      fleet,
      "SetDeviceWhitelist",
      ["address", "bool"],
      [address, bool]
    )
  end

  @spec device_whitelisted?(any, any) :: boolean
  def device_whitelisted?(fleet \\ Diode.fleet_address(), address) do
    ret = call(fleet, "deviceWhitelist", ["address"], [address], "latest")

    case :binary.decode_unsigned(ret) do
      1 -> true
      0 -> false
    end
  end

  defp call(fleet, name, types, values, blockRef) do
    {ret, _gas} = Shell.call(fleet, name, types, values, blockRef: blockRef)
    ret
  end

  def code() do
    "0x6080604052600436106100775763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633c5f7d46811461007c5780634ef1aee4146100a45780634fb3ccc5146100df578063504f04b714610110578063570ca7351461013c578063d90bd65114610151575b600080fd5b34801561008857600080fd5b506100a2600160a060020a03600435166024351515610172565b005b3480156100b057600080fd5b506100cb600160a060020a036004358116906024351661019d565b604080519115158252519081900360200190f35b3480156100eb57600080fd5b506100f46101bd565b60408051600160a060020a039092168252519081900360200190f35b34801561011c57600080fd5b506100a2600160a060020a036004358116906024351660443515156101cc565b34801561014857600080fd5b506100f4610206565b34801561015d57600080fd5b506100cb600160a060020a0360043516610215565b600160a060020a03919091166000908152600660205260409020805460ff1916911515919091179055565b600760209081526000928352604080842090915290825290205460ff1681565b600254600160a060020a031681565b600160a060020a03928316600090815260076020908152604080832094909516825292909252919020805460ff1916911515919091179055565b600154600160a060020a031681565b60066020526000908152604090205460ff16815600a165627a7a723058203f95e73b5ed23de51b088174d875d425749fcd0c4bdc6ed4d497d05aa560bc8e0029"
    |> Base16.decode()
  end
end
